# -*- coding: utf-8 -*-
"""my_download.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/armandossrecife/lp2024-1/blob/main/my_download.ipynb

# Download de arquivos
"""

import requests
from tqdm import tqdm  # Import for progress bar
from urllib.parse import urlparse
import os

"""## Class de utilidades"""

PROTOCOLOS_SUPORTADOS = ('http', 'https', 'ftp')

# Classe que extrai nome e extensao de uma URL
class Util:
    def extrair_nome_extensao_url(self, url):
        try:
            parsed_url = urlparse(url)
            if parsed_url.scheme not in PROTOCOLOS_SUPORTADOS:
                raise ValueError(f"Protocolo não suportado: {parsed_url.scheme}")

            caminho_arquivo = parsed_url.path
            if not caminho_arquivo:
                raise ValueError("Arquivo não identificado na URL")
            arquivo = os.path.basename(caminho_arquivo).split('.')
            nome_arquivo = arquivo[0]
            extensao = arquivo[1]
            return nome_arquivo,extensao

        except Exception as ex:
            raise ValueError(f"{str(ex)}") from ex  # Preserve original exception

# Exemplos:
url1 = 'https://raw.githubusercontent.com/armandossrecife/teste/main/babydogcat.png'
url2 = 'https://raw.githubusercontent.com/armandossrecife/teste/main/screen_matrix.jpeg'
url3 = 'https://raw.githubusercontent.com/armandossrecife/teste/main/Kalimba.mp3'
url4 = 'https://raw.githubusercontent.com/armandossrecife/teste/main/Adrienne.mp4'

nome1, extensao1 = Util().extrair_nome_extensao_url(url1)
print(f'Arquivo: {nome1}, Extensão: {extensao1}')

nome4, extensao4 = Util().extrair_nome_extensao_url(url4)
print(f'Arquivo: {nome4}, Extensão: {extensao4}')

try:
  Util().extrair_nome_extensao_url("qualquer coisa")
except Exception as ex:
  print(ex)

"""## Introdução a barra de progresso em modo texto

https://tqdm.github.io
"""

#!pip install tqdm

from tqdm import tqdm

contador = 0
for i in tqdm(range(100)):
    pass

import time

def faz_alguma_coisa():
  time.sleep(1)

# total de iteracoes: 10
total_seconds = 10

print(f"Aguarde {total_seconds}s...")
for _ in range(total_seconds):
  faz_alguma_coisa()

# Como o tqdm atualiza com base em iterações
# podemos criar um loop com atrasos de um segundo
with tqdm(total=total_seconds, desc="Simulando um progresso", unit="s") as pbar:
    for _ in range(total_seconds):
        faz_alguma_coisa()
        pbar.update(1)  # Atualiza a barra de progresso em 1 segundo.

"""## Faz o download de um arquivo

URL do arquivo: https://raw.githubusercontent.com/armandossrecife/teste/main/babydogcat.png

### Download sem barra de progresso
"""

print(f"url: {url1}")
response = requests.get(url1, stream=True)  # Enable streaming for progress
cabecalho_resposta = response.headers
dados_cabecalho = dict(cabecalho_resposta)

print(f"Headers: {dados_cabecalho}")
total_size = int(response.headers.get('content-length', 0))  # Get total file size
print(f'Total: {total_size}')

dados_cabecalho

# Conteudo da resposta
print(type(response.content))

# Cria um canal de conteudo binario com pedacos em 1024 bytes
response.iter_content(chunk_size=1024)

# Consome o conteudo binario desse canal
print("Aguarde...")
# Cria um novo arquivo para receber o conteudo binario
nome_arquivo = 'meu_arquivo.png'
with open(nome_arquivo, 'wb') as file:
    for chunk in response.iter_content(chunk_size=1024):
        file.write(chunk)
print(f"Arquivo {nome_arquivo} criado com sucesso!")

"""### Download com barra de progresso"""

print(f"url: {url1}")
response = requests.get(url1, stream=True)  # Enable streaming for progress
cabecalho_resposta = response.headers
dados_cabecalho = dict(cabecalho_resposta)
print(f"Headers: {dados_cabecalho}")
total_size = int(response.headers.get('content-length', 0))  # Get total file size
print(f'Total: {total_size}')

# Conteudo da resposta
print(type(response.content))

len(response.content)

# Cria um canal de conteudo binario com pedacos em 1024 bytes
response.iter_content(chunk_size=1024)

print("Aguarde...")
# Cria um novo arquivo para receber o conteudo binario
nome_arquivo = 'meu_arquivo.png'
with open(nome_arquivo, 'wb') as file:
  with tqdm(total=total_size, unit='B', unit_scale=True, desc="meu_arquivo.png") as pbar:
    for chunk in response.iter_content(chunk_size=1024):
      if chunk:
        file.write(chunk)
        pbar.update(len(chunk))

"""## Classe de download com barra de progresso"""

# Download para baixar arquivos da internet.
class Download:
    def __init__(self, url, path_arquivo):
        self.url = url # Armazena a URL do arquivo a ser baixado.
        self.path_arquivo = path_arquivo # Caminho e nome do arquivo onde o download será salvo.
        self.callback = None

    # Sobre a funcao callback
    # Deve ser chamada durante o progresso do download.
    # Atualiza os eventos de retorno
    # Deve receber dois parâmetros: o tamanho total do arquivo e o progresso atual.
    def set_callback(self, callback):
        self.callback = callback

    def executa(self):
        try:
            print('Aguarde...')
            response = requests.get(self.url, stream=True)  # Enable streaming for progress
            response.raise_for_status()  # Verifica se houve algum erro na requisição
            total_size = int(response.headers.get('content-length', 0))  # Get total file size
            with open(self.path_arquivo, 'wb') as file:
                with tqdm(total=total_size, unit='B', unit_scale=True, desc=self.path_arquivo) as pbar:
                    for chunk in response.iter_content(chunk_size=1024):
                        if chunk:
                            file.write(chunk)
                            pbar.update(len(chunk))
                            if self.callback:
                                self.callback(total_size, pbar.n)  # Call the callback with total size and current progress
            print(f"Download completo. Tamanho: {total_size}, Arquivo salvo em: {self.path_arquivo}")
            return total_size
        except requests.exceptions.MissingSchema:
            print("URL inválida. Certifique-se de fornecer uma URL válida.")
            raise Exception('URL inválida. Certifique-se de fornecer uma URL válida.')
        except requests.exceptions.RequestException as e:
            print(f"Erro na conexão: {e}")
            raise Exception(f"Erro na conexão: {e}")

meu_download = Download(url1, 'meu_arquivo.png')
meu_download.executa()

print(url3)
nome_arquivo,ext = Util().extrair_nome_extensao_url(url3)
print(nome_arquivo,ext, end="")

nome_arquivo,ext = Util().extrair_nome_extensao_url(url3)
meu_download = Download(url3, f'{nome_arquivo}.{ext}')
meu_download.executa()

nome_arquivo,ext = Util().extrair_nome_extensao_url(url4)
meu_download = Download(url4, f'{nome_arquivo}.{ext}')
meu_download.executa()